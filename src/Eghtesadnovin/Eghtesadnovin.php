<?php

namespace VahidIrn\Gateway\Eghtesadnovin;

use SoapClient;
use VahidIrn\Gateway\PortAbstract;
use VahidIrn\Gateway\PortInterface;

class Eghtesadnovin extends PortAbstract implements PortInterface
{
    /**
     * Url of eghtesadnovin gateway web service
     *
     * @var string
     */
    protected $serverUrl = 'https://pna.shaparak.ir/ref-payment2/jax/merchantService?wsdl';

    /**
     * $token generated by eghtesadnovin gateway
     *
     * @var string
     */
    private $token = '';

    /**
     * $dataToSign return from eghtesadnovin gateway
     *
     * @var string
     */
    private $dataToSign;

    /**
     * $sessionId return from eghtesadnovin gateway
     *
     * @var string
     */
    private $sessionId;

    /**
     * $uniqueId return from eghtesadnovin gateway
     *
     * @var string
     */
    private $uniqueId;

    /**
     * {@inheritdoc}
     */
    public function set($amount)
    {
        $this->amount = intval($amount);

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function ready()
    {
        $this->sendPayRequest();

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function redirect()
    {
        $token = $this->token;
        return \View::make('gateway::eghtesadnovin-redirector')->with(compact('token'));
    }

    /**
     * {@inheritdoc}
     */
    public function verify($transaction)
    {

        parent::verify($transaction);
        $this->transactionGetSessionId();
        $this->verifyPayment();

        return $this;
    }

    /**
     * Sets callback url
     * @param $url
     */
    function setCallback($url)
    {
        $this->callbackUrl = $url;
        return $this;
    }

    /**
     * Gets callback url
     * @return string
     */
    function getCallback()
    {
        if (!$this->callbackUrl)
            $this->callbackUrl = $this->config->get('gateway.eghtesadnovin.callback-url');

        return $this->makeCallback($this->callbackUrl, ['transaction_id' => $this->transactionId()]);
    }

    /**
     * Send pay request to server
     *
     * @return void
     *
     * @throws EghtesadnovinException
     */
    protected function sendPayRequest()
    {
        $this->newTransaction();
        $this->login();
        $this->transactionSetRefId();
    }

    /**
     * Verify user payment from bank server
     *
     * @throws EghtesadnovinException
     */
    protected function verifyPayment()
    {
//        $this->login();
        $this->tokenPurchaseVerifyTransaction();

    }

    /**
     * Login before do anything
     *
     * @throws EghtesadnovinException
     */
    protected function login()
    {
        $params = array(
            'param' => array(
                'UserName' => $this->config->get('gateway.eghtesadnovin.username'),
                'Password' => $this->config->get('gateway.eghtesadnovin.password'),
            )
        );
        try {
            $soap = new \SoapClient($this->serverUrl);
            $response = $soap->MerchantLogin($params);

        } catch (\SoapFault $e) {
            $this->transactionFailed();
            $this->newLog('SoapFault', $e->getMessage());
            throw $e;
        }
        if ($response->return->Result != "erSucceed") {
            // Todo: Return error in connecting to bank
        } else {
            // add payment ID to session
            $this->sessionId = $response->return->SessionId;

            // Call next step of process
            $this->getPurchaseParamsToSign();
        }
    }

    public function getPurchaseParamsToSign()
    {

        $params = array(
            'param' => array(
                'WSContext' => $this->getWsContext(),
                'ReserveNum' => $this->transactionId,
                'Amount' => $this->amount,
                'AmountSpecified' => true,
                'RedirectUrl' => $this->getCallback(),
                'TransType' => "enGoods",
            )
        );
        try {
            $soap = new \SoapClient($this->serverUrl);
            $response = $soap->GenerateTransactionDataToSign($params);

        } catch (\SoapFault $e) {
            $this->transactionFailed();
            $this->newLog('SoapFault', $e->getMessage());
            throw $e;
        }

        if ($response->return->Result != "erSucceed") {
            // Todo: Return error in connecting to bank
        } else {
            $this->dataToSign = $response->return->DataToSign;
            $this->uniqueId = $response->return->UniqueId;

            // Call next step of process
            $this->generateSignedPurchaseToken();
        }
    }

    public function generateSignedPurchaseToken()
    {

        $fp = fopen($this->config->get('gateway.eghtesadnovin.msg-path'), "w");
        fwrite($fp, $this->dataToSign);
        fclose($fp);

        $fs = fopen($this->config->get('gateway.eghtesadnovin.signed-path'), "w");
        fwrite($fs, "");
        fclose($fs);

        openssl_pkcs7_sign(
            realpath($this->config->get('gateway.eghtesadnovin.msg-path')),
            realpath($this->config->get('gateway.eghtesadnovin.signed-path')),
            'file://' . $this->config->get('gateway.eghtesadnovin.certificate-path'),
            array(
                'file://' . $this->config->get('gateway.eghtesadnovin.certificate-path'),
                $this->config->get('gateway.eghtesadnovin.merchantId'),
            ),
            array(),
            PKCS7_NOSIGS
        );

        $data = file_get_contents($this->config->get('gateway.eghtesadnovin.signed-path'));

        $parts = explode("\n\n", $data, 2);
        $string = $parts[1];

        $parts1 = explode("\n\n", $string, 2);
        $signature = $parts1[0];

        $params = array(
            'param' => array(
                'WSContext' => $this->getWsContext(),
                'Signature' => $signature,
                'UniqueId' => $this->uniqueId,
            )
        );

        try {
            $soap = new \SoapClient($this->serverUrl);
            $response = $soap->GenerateSignedDataToken($params);

        } catch (\SoapFault $e) {
            $this->transactionFailed();
            $this->newLog('SoapFault', $e->getMessage());
            throw $e;
        }

        // Call next step of process
        if ($response->return->Result != "erSucceed") {
            // Todo: Return error in connecting to bank
        } else {
            $this->token = $response->return->Token;

            $this->transactionSetSessionId();
        }


    }


    public function tokenPurchaseVerifyTransaction()
    {
        $params = array(
            'param' => array(

                'WSContext' => $this->getWsContext(),
                'Token' => $this->token,
                'RefNum' => request('RefNum'),
            )
        );
        try {
            $soap = new \SoapClient($this->serverUrl);
            $response = $soap->VerifyMerchantTrans($params);
        } catch (\SoapFault $e) {
            $this->transactionFailed();
            $this->reverseTrans();

            $this->newLog('SoapFault', $e->getMessage());
            throw $e;
        }

        if (empty($response) || !isset($response->return))
            throw new EghtesadnovinException('در دریافت اطلاعات از بانک خطایی رخ داده است.');

        if ($response->return->Result != "erSucceed") {

            $this->transactionFailed();
            $message = $this->getMessage($response->return->Result, $statusResult);

            $this->newLog($statusResult, $message['fa']);

            $this->reverseTrans();
            $this->transactionFailed();
            throw new EghtesadnovinException($message['fa'], -100);
            // Todo: Return error in connecting to bank
        }

        $this->trackingCode = request('TraceNo');
        $this->cardNumber = request('CardMaskPan');
        $this->transactionSucceed();


    }


    /**
     * Return money to customer
     *
     * @throws EghtesadnovinException
     */
    public function reverseTrans()
    {

        $this->login();

        $params = array(
            'param' => array(
                'WSContext' => $this->getWsContext(),
                'Token' => $this->token,
                'RefNum' => $this->transactionId,
            )
        );
        try {
            $soap = new \SoapClient($this->serverUrl);
            $response = $soap->ReverseMerchantTrans($params);

        } catch (\SoapFault $e) {
            $this->transactionFailed();
            $this->newLog('SoapFault', $e->getMessage());
            throw $e;
        }
    }


    /**
     * Register error to error list
     *
     * @param int $code
     * @param string $message
     *
     * @return array|null
     *
     * @throws EghtesadnovinException
     */
    private function getMessage($code, $message)
    {
        $result = EghtesadnovinResult::codeResponse($code, $message);
        if ($result) {
            return $result;
        }
        $result = array(
            'code' => $code,
            'message' => $message,
            'fa' => 'خطای ناشناخته',
            'en' => 'Unknown Error',
            'retry' => false
        );
        return $result;
    }

    public function getWsContext()
    {

        return
            array(
                'SessionId' => $this->sessionId,
                'UserName' => $this->config->get('gateway.eghtesadnovin.username'),
                'Password' => $this->config->get('gateway.eghtesadnovin.password')
            );
    }


    /**
     * Update transaction sessionId
     *
     * @return void
     */
    protected function transactionSetSessionId()
    {
        return $this->getTable()->where('transaction_id', $this->transactionId)->update([
            'session_id' => $this->sessionId,
            'token' => $this->token,
            'updated_at' => now(),
        ]);

    }

    /**
     * Get transaction sessionId
     *
     * @return void
     */
    protected function transactionGetSessionId()
    {
        $transaction = $this->getTable()->where('transaction_id', $this->transactionId)->first();
        $this->sessionId = $transaction['session_id'];
        $this->token = $transaction['token'];
    }
}
